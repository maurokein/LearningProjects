Árboles de expresión. Evaluación de expresiones algebraicas o lógicas-> este tipo de operaciones son expresiones binarias, por lo cual se modelan con este tipo de árboles. En este caso solo nos manejaremos con árboles algebraicos, que son árboles asociados a operaciones aritméticas, donde los nodos internos representan operandores y los nodos externos representan operandos. 
Al necesitar utilizar la expresión algebraica, las variables toman un valor y se resuelve la cadena de operaciones. En matemática lo que normalmente usamos es lo que se conoce como notación INFIJA -> significa que el operador que uno aplica se encuentra entre dos operandos determinados. Relacionado con los recorridos en un árbol, se vincula con el Inorden a la notación infija, con el preorden se encuentra una notación PREFIJA, la cual indica que el operador que voy a aplicar se encuentra antes que los operandos sobre los cuales se van a operar (/*+ab-cd+ef). Por último, un recorrido postorden devuelve una operación postfija -> el operador aparece después de los dos operandos sobre los cuales se debe aplicar
La operación que más se usa es la del recorrido postorden, que es lo que se conoce como NOTACIÓN POLACA INVERSA (?).Es la más útil porque desambiguar expresiones que de otra forma sería didífil de determinar. De qué manera se puede evaluar todo un árbol haciendo un recorrido. La idea es que se puede a partir del árbol obtener su resultado. La estrategia es que a partir de los recorridos se construye el árbol. Si tenemos una expresión prefija, postfija, infija, podemos construir el árbol.
Nosotros podemos distinguir entre nodos internos (operadores) y las hojas, donde se encuentran los operandos. Entonces a los operadores los puedo comparar con '+', '-', '*', '/'... si es algo distinto, ya se determina que el nodo está representando un operando. Lo que el compilador hace para dar un resultado (la misma mecánico utilizamos para armar un árbol), es que si lo que se recibe en un string de caracteres es algo distinto a los operadores básicos, lo que se hace es APILARLO: tengo una pila como estructura adicional que guarda los operandos. Cuando se encuentra un operador, lo que se hace es desapilar dos elementos y aplicar el operador encontrado a esos dos valores. Una vez resuelta la cuenta, el resultado se vuelve apilar, para que si vuelve a aparecer un operador se aplique a los dos elementos al tope de la pila. Para simplificar las cosas, consideramos que las expresiones vienen bien escritas. Al llegar al final del string, en principio, está todo bien.
Se aprende cómo a partir de las distintas expresiones se puede construir un árbol, pero no necesariamente se llega a dibujar el árbol, sino que el mismo queda de manera tal que solo queda la raíz del árbol y los nodos enganchados, lo que se necesita es un árbol que esté 'representado' por la raíz. Hay que recorrer un árbol a partir de un nodo, sin verlo en la pantalla, aunque si se podría imprimir con algún graficador que ayuda a verlo muy claramente, sino hay que ver con tablas y líneas el contenido interno del árbol. La expresión infija, igualmente, también sirve a solo efecto de la construcción del árbol. 
Con la expresión infija, en la pila solo hubiera quedado un operador numérico '+'. Nos queda entonces un string de caracteres, se toma un caracter de esa expresión, y si el caracter es un operando, se crea un nodo y se lo apila, que es equivalente a lo que se hace cuando se apilaba cualquier valor numérico. Pero al recibir un operador hay que crear un nodo y apilarlo. La nueva dirección se apila, y el proceso se repite para todos los caracteres dentro del string.
Operador -> NODO INTERNO   
Operando -> HOJA 
Al encontrar un operador, se desapila primero el hijo derecho, luego el hijo izquierdo. 
